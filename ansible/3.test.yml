---
- name: "bootstratp kube cluster"
  any_errors_fatal: true
  hosts: kub_ctrl
  tasks:
  - name: "fool protection"
    become: false
    shell: kubectl get nodes
    register: existing_nodes
  - block:
    - name: "stop if there are any existong k8s nodes"
      debug:
        msg: "There are already some existing K8s nodes on this machine!"
    - meta: end_play
    when: existing_nodes.stdout | regex_search("STATUS")
  - name: "create configuration files for calico and cluster"
    become: false
    template:
      src: "{{ templates_dir }}/{{ item.template }}"
      dest: "{{ item.file }}"
    loop: "{{ configs }}"
  - name: "launch bootstrap"
    shell: "sudo kubeadm init --config={{ configs[0].file }}"
    register: init_result
  - name: "save init result to log"
    become: false
    delegate_to: localhost
    copy:  
      content: "{{ init_result.stdout }}"
      dest: "./kube_init.log"
  - name: "check if cluster initialization was successfull"
    debug:
      msg: "Controller was initialized successfully! Log: ./kube_init.log"
    when: init_result.stdout | regex_search("Your Kubernetes control-plane has initialized successfully!")
  - name: "get join token"
    delegate_to: localhost
    shell: grep -A 2 "kubeadm join" ./kube_init.log | sed 's/\\//g' | tr -d '\t' | tr -d '\n'
    register: join_token
  - name: "show join token"
    debug:
      msg: "{{ join_token.stdout }}"
  - name: "create kube dir"
    become: false
    file:
      name: "/home/{{ userx }}/{{ kube_dir }}"
      state: directory
  - name: "copy admin conf"
    copy:
      src: /etc/kubernetes/admin.conf
      remote_src: yes
      dest: "/home/{{ userx }}/{{ kube_dir }}/config"
  - name: "fix admin conf owners"
    file:
      path: "/home/{{ userx }}/{{ kube_dir }}/config"
      owner: "{{ userx }}"
      group: "{{ groupx }}"
  - name: "launch calico"
    become: false
    shell: "kubectl apply -f {{ configs[1].file }}"
    register: calico_result
  - name: "save calico result to log"
    become: false
    delegate_to: localhost
    copy:
      content: "{{ calico_result.stdout }}"
      dest: "./calico_launch.log"
  - name: "init final message"
    debug:
      msg: "Calico pods launch log is calico_launch.log. Now check pods with 'kubectl get pods --all-namespaces' and nodes with 'kubectl get nodes'"
  - name: "Waiting for all pods to start"
    become: false
    ansible.builtin.shell: "kubectl get pods --all-namespaces | awk '{print $4}' | grep -v STATUS"
    register: pods_status
    until: pods_status.stdout_lines | unique | sort | join('') | trim == 'Running'
    delay: 20
    retries: 10
- name: "join nodes"
  any_errors_fatal: true
  hosts: kub_nodes
  tasks:
  - name: "get join token"
    delegate_to: localhost
    shell: grep -A 2 "kubeadm join" ./kube_init.log | sed 's/\\//g' | tr -d '\t' | tr -d '\n'
    register: join_tokenx
  - name: "join"
    shell: "sudo {{ join_tokenx.stdout }}"
    register: join_result
  - name: "save join result to log"
    become: false
    delegate_to: localhost
    copy:  
      content: "{{ join_result.stdout }}"
      dest: "./{{ ansible_facts['hostname'] }}_join.log"
  - name: "Waiting for all nodes to become ready"
    become: false
    delegate_to: kub_ctrl
    ansible.builtin.shell: "kubectl get nodes | awk '{print $2}' | grep -v STATUS"
    register: nodes_status
    until: nodes_status.stdout_lines | unique | sort | join('') | trim == 'Ready'
    delay: 20
    retries: 10
  - name: "join final message"
    debug:
      msg: "All nodes are Ready. Now check pods with 'kubectl get pods --all-namespaces' and nodes with 'kubectl get nodes'"
...