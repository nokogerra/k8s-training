---
- name: "bootstratp kube cluster"
  hosts: kub_ctrl
  tasks:
  - name: "create configuration files for calico and cluster"
    become: false
    template:
      src: "{{ templates_dir }}/{{ item.template }}"
      dest: "{{ item.file }}"
    loop: "{{ configs }}"
  - name: "launch bootstrap"
    shell: "sudo kubeadm init --config={{ configs[0].file }}"
    register: init_result
  - name: "save init result to log"
    local_action:
      module: copy
      content: "{{ init_result.stdout }}"
      dest: "./kube_init.log"
  - name: "check if cluster initialization was successfull"
    debug:
      msg: "Controller was initialized successfully! Log: ./kube_init.log"
    when: init_result | regex_search("Your Kubernetes control-plane has initialized successfully!")
  - name: "check if cluster initialization failed"
    debug:
      msg: "INITIALIZATION FAILED! Log: ./kube_init.log"
    when: not init_result | regex_search("Your Kubernetes control-plane has initialized successfully!")
  - name: "create kube dir"
    become: false
    file:
      name: "/home/{{ userx }}/{{ kube_dir }}"
      state: directory
  - name: "copy admin conf"
    copy:
      src: /etc/kubernetes/admin.conf
      remote_src: yes
      dest: "/home/{{ userx }}/{{ kube_dir }}/config"
  - name: "fix admin conf owners"
    file:
      path: "/home/{{ userx }}/{{ kube_dir }}/config"
      owner: "{{ userx }}"
      group: "{{ groupx }}"
  - name: "launch calico"
    become: false
    shell: "kubectl apply -f {{ configs[1].file }}"
    register: calico_result
  - name: "save calico result to log"
    local_action:
      module: copy
      content: "{{ calico_result.stdout }}"
      dest: "./calico_launch.log"
  - name: "final message"
    debug:
      msg: "Calico pods launch log is calico_launch.log. Now check pods with 'kubectl get pods --all-namespaces' and nodes with 'kubectl get nodes'"
...